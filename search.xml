<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>常见的Git提交规范类型</title>
      <link href="/2024/09/09/git-commit/"/>
      <url>/2024/09/09/git-commit/</url>
      
        <content type="html"><![CDATA[<h1 id="常见的Git提交规范类型"><a href="#常见的Git提交规范类型" class="headerlink" title="常见的Git提交规范类型"></a>常见的Git提交规范类型</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>平时在Gitee, GitHub, GitCode等等众多代码托管平台上，阅读其他优秀项目及框架源码时经常看到别人提交的代码记录中包含一些<strong>feat</strong>, <strong>fix</strong>,<strong>chore</strong>,<strong>refactor</strong>等等。第一次看到不以为然，只是觉得看不懂为什么要这样写，明明可以直接简单明了的添加提交信息就行了，但为什么要 <del>画足添蛇</del> 画蛇添足呢? 其实依据这种规范书写提交信息的主要目的是为了<strong>提高提交记录的可读性和自动化处理能力。</strong>，然而在我平时提交时几乎不会区分这些，而是直接写下做了什么的提交信息，草草了之，但为了日后能进一步提高书写规范，今天就来好好整理一下这些“繁文缛节”。</p><p>Git正确的提交规范：</p><pre>git commit -m "subject + : + space + message"</pre><p></p><hr><h2 id="规范类型"><a href="#规范类型" class="headerlink" title="规范类型"></a>规范类型</h2><p><em>注：以下 [gc -m] 指代 git commit -m</em></p><ol><li><strong>feat</strong>(feature): 新功能<ul><li>用于描述新增加的功能</li><li>例如：gc -m “feat: 添加网页icon图标”</li></ul></li><li><strong>fix</strong>: 修补bug<ul><li>用于描述修复了某个bug</li><li>例如：gc -m “fix: 修复用户访问权限的问题”</li></ul></li><li><strong>docs</strong>(documentation)<ul><li>用于对文档的修改，如README.md文件的更新</li><li>例如：gc -m “docs: 更新后端接口文档”</li></ul></li><li><strong>style</strong>: 代码格式(不影响代码运行的变动)<ul><li>用于格式的修正，比如代码缩进或其他样式的改动，不涉及代码逻辑变化</li><li>例如：gc -m “style: 使用prettier格式化代码”</li></ul></li><li><strong>refactor</strong>: 重构代码或重命名<ul><li>用于重构代码，既不是新增功能，也不是修复bug的</li><li>例如：gc -m “控制台优化重构 | 侧边栏收缩icon图标重命名”</li></ul></li><li><strong>pref(performance improvement)</strong>: 性能优化<ul><li>用于提高代码性能的更改</li><li>例如：gc -m “优化查询用户列表的速度”</li></ul></li><li><strong>test</strong>: 增加测试<ul><li>用于添加或修改测试用例</li><li>例如：gc -m “test: 为登录功能添加单元测试”</li></ul></li><li><strong>chore</strong>: 构建过程或辅助工具的变动<ul><li>用于更新构建工具，依赖等</li><li>例如：gc -m “chore: 更新yarn依赖”</li></ul></li><li><strong>build</strong>: 影响构建系统或外部依赖的更改(例如：webpack，npm)<ul><li>例如：gc -m “build: 更新webpack配置”</li></ul></li><li><strong>ci</strong>: 持续集成的配置文件或脚本的变动(例如：Travis，BrowserStack)<ul><li>例如gc -m “ci: 更新Travis配置项”</li></ul></li><li><strong>revert</strong>: 撤销某次提交<ul><li>用于撤销之前的某次提交</li><li>例如：gc -m “revert: 撤销 commit 123456abc”</li></ul></li><li><strong>merge</strong>: 分支合并<ul><li>用于合并分支的提交</li><li>例如：gc -m “merge: 合并 /feature/register 分支”</li></ul></li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上就是几种常见的代码提交规范类型，这些类型有助于保持代码提交记录的清晰性和可读性，使用规范的提交信息可以让项目更加模块化，易于维护和理解，同时也便于团队协作时其他开发人员理解每次提交的意图和信息内容，从而提高代码的可维护性和质量🥳。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在JavaScript中交换两个数组元素</title>
      <link href="/2024/09/05/swap-elements/"/>
      <url>/2024/09/05/swap-elements/</url>
      
        <content type="html"><![CDATA[<h1 id="交换两个数组元素的方法"><a href="#交换两个数组元素的方法" class="headerlink" title="交换两个数组元素的方法"></a>交换两个数组元素的方法</h1><p>在 JavaScript 中有时需要交换数组中的两个元素，可以使用以下三种方法之一。</p><h2 id="临时变量-temp"><a href="#临时变量-temp" class="headerlink" title="临时变量 temp"></a>临时变量 temp</h2><p>使用一个临时变量 temp 分为以下三个步骤：</p><ol><li>创建一个临时变量来保存第一个元素的值；</li><li>将第一个元素的值设置为第二个元素的值；</li><li>将第二个元素的值设置为临时变量中的值。</li></ol><pre>    <code style="font-size: 20px; background-color: rgba(31,31,31,.31)">let myArray = [1, 2, 3, 4, 5];const temp = myArray[0];myArray[0] = myArray[1];myArray[1] = temp;console.log(myArray); // [2, 1, 3, 4, 5]</code></pre><p>封装为函数：</p><pre>    <code style="font-size: 20px; background-color: rgba(31,31,31,.31)">const swapElements =(array, index1, index2) =&gt; {    let temp = array[index1];    array[index1] = array[index2];    array[index2] = temp;};let myArray = [1, 2, 3, 4, 5];swapElements(myArray, 0, 1);console.log(myArray); // [2, 1, 3, 4, 5]</code></pre><h2 id="解构赋值-推荐"><a href="#解构赋值-推荐" class="headerlink" title="解构赋值(推荐)"></a>解构赋值(推荐)</h2><p>只需创建一个新的数组，其中包含按特定顺序排列的两个元素，然后将其分配给一个新的数组，其中包含按相反顺序排列的两个元素。实现如下：</p><pre>    <code style="font-size: 20px; background-color: rgba(31,31,31,.31)">let myArray = [1, 2, 3, 4, 5];[myArray[0], myArray[1]] = [myArray[1], myArray[0]];console.log(myArray); // [2, 1, 3, 4, 5]</code></pre><p>封装为函数：</p><pre>    <code style="font-size: 20px; background-color: rgba(31,31,31,.31)">const swapElements =(array, index1, index2) =&gt;[myArray[index1], myArray[index2]] = [myArray[index2], myArray[index1]];let myArray = [1, 2, 3, 4, 5];swapElements(myArray, 0, 1);console.log(myArray); // [2, 1, 3, 4, 5]</code></pre><h2 id="Splice-方法"><a href="#Splice-方法" class="headerlink" title="Splice() 方法"></a>Splice() 方法</h2><p>使用 ES6 中的 <code>splice()</code>数组方法：从一个数组中移除一个或多个元素，然后用任何指定的元素替换这些元素。</p><p><code>splice()</code>方法返回值：</p><ul><li>一个包含了删除的元素的数组。</li><li>如果只移除一个 a 元素，则只返回一个 a 元素的数组。</li><li>如果没有删除任何元素，则返回一个空数组。</li></ul><p>语法：<code>array.splice(index, howmany, element1, ....., elementX)</code></p><p>具体实现：</p><pre>    <code style="font-size: 20px; background-color: rgba(31,31,31,.31)">let myArray = [1, 2, 3, 4, 5];myArray[0] = myArray.splice(1, 1, myArray[0])[0]; # 返回索引为1的元素数组console.log(myArray); // [2, 1, 3, 4, 5]</code></pre><p>封装为函数：</p><pre>    <code style="font-size: 20px; background-color: rgba(31,31,31,.31)">const swapElements =(array, index1, index2) =&gt;myArray[index1] = myArray.splice(index2, 1, myArray[index1])[0];let myArray = [1, 2, 3, 4, 5];swapElements(myArray, 0, 1);console.log(myArray); // [2, 1, 3, 4, 5]</code></pre><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上三种方法均可实现数组中任意两元素交换，为了方便理解和使用，最好使用 ES6 的<strong>解构赋值</strong>方法😉。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo的图片懒加载插件</title>
      <link href="/2024/06/15/img-lazy-loading/"/>
      <url>/2024/06/15/img-lazy-loading/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-lazyload-image-图片懒加载"><a href="#Hexo-lazyload-image-图片懒加载" class="headerlink" title="Hexo-lazyload-image 图片懒加载"></a>Hexo-lazyload-image 图片懒加载</h1><h2 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h2><p>图片懒加载是提升网站性能和用户体验的常用方式之一，它仅把用户可见的部分显示图片，其余的都暂时不加载。反之，如果不使用它而使整个页面包含的所有图片一次性加载完成会造成页面部分资源加载不完整甚至导致白花花一片，造成用户体验不好。目前流行的做法是滚动动态加载，也就是懒加载——监听页面滚动事件，使显示在屏幕之外的图片默认不加载，随着用户浏览页面的滚动距离，图片进入了显示的范围，则触发图片的加载显示。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>让所有图片元素 src 指向一个小的站位图片比如 loading，并新增一个属性(如 data-original)存放真实图片地址。每当页面加载（或者滚动条滚动），使用 JS 脚本将可视区域内的图片 src 替换回真实地址，并做请求重新加载。</p><h2 id="网页优化"><a href="#网页优化" class="headerlink" title="网页优化"></a>网页优化</h2><ol><li><p>减少初始加载时间：在网页中，图片通常是较大的资源之一，一旦图片过多会导致页面加载时间较长。通过图片懒加载，可以减少初始页面的图片加载数量，将非必要的图片延迟加载，减少了首屏加载时间和服务器的压力，从而提高页面响应速度。</p></li><li><p>节省网络流量：图片懒加载可以在需要时才加载图片，避免了不必要的图片加载和传输。这对于数据流量有限或网络状况较差的用户来说，可以显著节省网络流量，提高用户体验。</p></li><li><p>提高缓存利用率：通过图片懒加载，可以将已加载的图片存储在本地或离线缓存中，以便在后续访问时直接使用，而不需要重新加载。这可以提高缓存利用率，减少网络请求次数，进一步提高性能和用户体验。</p></li><li><p>提高用户体验：图片懒加载可以根据用户的行为和需求来动态加载图片，提供更加个性化的用户体验。例如，当用户在页面上滚动或触发某些特定事件时，相关图片可以被动态加载和呈现，提供更加流畅和自然的交互体验。</p></li><li><p>优化图像质量：在加载图像时，可以使用不同的图像质量和压缩选项。通过懒加载技术，可以在需要时根据网络条件和设备性能选择最佳的图像质量或压缩选项。这有助于提高用户体验并减少带宽消耗。</p></li><li><p>…</p></li></ol><h2 id="推荐插件及示例"><a href="#推荐插件及示例" class="headerlink" title="推荐插件及示例"></a>推荐插件及示例</h2><p>本文章中使用了<a href="https://www.npmjs.com/package/hexo-lazyload-image">Hexo-lazyload-image</a>插件实现图片懒加载，可以刷新当前页面直接滚动至页面底部查看各个图片加载情况。</p><!-- 使用 Hexo 的img标签插入图片 --><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>在你的 hexo 项目的_config.yml 配置文件中设置如下：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lazyload:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开启图片懒加载配置</span></span><br><span class="line">  <span class="attr">onlypost:</span> <span class="literal">false</span> <span class="comment"># optional</span></span><br><span class="line">  <span class="attr">loadingImg:</span> <span class="comment"># optional eg ./images/loading.gif</span></span><br><span class="line">  <span class="attr">isSPA:</span> <span class="literal">false</span> <span class="comment"># optional</span></span><br><span class="line">  <span class="attr">preloadRatio:</span> <span class="number">3</span> <span class="comment"># optional, default is 1</span></span><br></pre></td></tr></tbody></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>总之，图片懒加载解决了许多与网页性能和用户体验相关的问题，包括减少初始加载时间、节省网络流量、提高缓存利用率等等，在实际应用中，需要根据具体的需求和情况选择是否使用图片懒加载技术，并注意实现细节和安全性问题以确保应用程序的正常运行和用户的隐私安全。</p><img src="/images/image01.jpeg" class="" width="200" height="200" title="img1 200x200"><!-- 使用 html 的img标签插入图片 --><img src="/images/image01.jpeg" width="200" height="200" alt="img2 200x200"><!-- 在 Hexo 中使用 Markdown 的原生语法无法设置图片的大小 --><!-- <div style="width: 400px">    ![test markdown](https://s2.loli.net/2024/06/16/aAGtC6HzW9Lw8hc.jpg)</div> --><!-- 标准 Markdown 图片语法引用相关图片：![title](url) --><!-- 扩展了 Markdown 的插图语法(可设置图片大小)在主题source/js/hexo_resize_image.js--><!-- 用法：    1.可指定像素        ![指定宽高](/image/test.jpg?200x200)        ![仅指定width](/image/test.jpg?200x)        ![仅指定height](/image/test.jpg?x200)    2.可指定缩放比例，等比例缩放图片大小至 x %        ![指定比例](/image/test.jpg?40)    示例如下： --><p><img src="https://s2.loli.net/2024/06/16/aAGtC6HzW9Lw8hc.jpg?400x400" alt="img3 400x400"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 图片懒加载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/06/13/hello-world/"/>
      <url>/2024/06/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>这是本博客的第一篇文章，欢迎访问。 本博客使用 <a href="https://hexo.io/docs/">Hexo</a> + GitHub + <a href="https://github.com/blinkfox/hexo-theme-matery">matery</a> 完成搭建 。如果你在使用 Hexo 搭建个人博客时遇到疑难杂症，你可以在 <a href="https://hexo.io/docs/troubleshooting.html">故障排除</a> 中找到答案，也可以在 <a href="https://github.com/hexojs/hexo/issues">GitHub</a> 上寻找。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/commands#init">init</a></p><h3 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="清理之前的生成文件"><a href="#清理之前的生成文件" class="headerlink" title="清理之前的生成文件"></a>清理之前的生成文件</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/commands#clean">Cleanning</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="启动本地服务"><a href="#启动本地服务" class="headerlink" title="启动本地服务"></a>启动本地服务</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="部署更新后的网站到远程服务器"><a href="#部署更新后的网站到远程服务器" class="headerlink" title="部署更新后的网站到远程服务器"></a>部署更新后的网站到远程服务器</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><hr><p>以上为日常常用命令，更多命令查看[官网](<a href="https://hexo.io/docs/commands">Commands | Hexo</a>)。</p>]]></content>
      
      
      
        <tags>
            
            <tag> live记录 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
